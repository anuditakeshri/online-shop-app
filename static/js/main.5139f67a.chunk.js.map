{"version":3,"sources":["components/header.js","components/nav.js","components/login.js","utils/config.js","components/shop.js","App.js","serviceWorker.js","index.js","utils/firebase-config.js"],"names":["Header","react_default","a","createElement","className","Nav","classNameName","href","src","width","height","alt","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","activeClassName","to","Login","_React$Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","msg","inherits","createClass","key","value","refs","uid","pwd","_this2","userid","userObject","firebase","ref","set","then","data","setState","catch","err","_this3","on","snapshot","val","updateLoginStatus","htmlFor","placeholder","onClick","doLogin","bind","add","clear","React","Component","URLS","Shop","items","fetch","response","json","console","log","error","doAjax","header_Header","nav_Nav","App","isLogin","loginState","arguments","length","undefined","shop_Shop","login_Login","isAuth","Boolean","window","location","hostname","match","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5139f67a.chunk.js","sourcesContent":["import React from 'react';\r\nexport const Header = ()=>{\r\n    return(\r\n        <h1 className=\"alert-success\">Online Shop</h1>\r\n    )\r\n}","import React from 'react';\r\nexport const Nav = ()=>{\r\n    return (\r\n        <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n<a classNameName=\"navbar-brand\" href=\"#\">\r\n    <img src=\"https://www.svgimages.com/svg-image/s7/amazon-logo-256x256.png\" width=\"30\" height=\"30\" className=\"d-inline-block align-top\" alt=\"No logo found\"/>\r\n    Shopping\r\n  </a>\r\n  <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n    <span className=\"navbar-toggler-icon\"></span>\r\n  </button>\r\n\r\n  <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n    <ul className=\"navbar-nav mr-auto\">\r\n      <li className=\"nav-item active\">\r\n      <a className=\"nav-link\" activeClassName=\"active\" to=\"/\">Items <span className=\"sr-only\">(current)</span></a>\r\n      </li>\r\n      <li className=\"nav-item\">\r\n        <a className=\"nav-link\" to=\"/about\">AboutUs</a>\r\n      </li>\r\n      </ul>\r\n        </div>\r\n</nav>\r\n    )\r\n}","import React from 'react';\r\nimport * as firebase from \"firebase\";\r\nexport class Login extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {msg:''};\r\n\r\n    }\r\n    clear(){\r\n        this.refs.uid.value ='';\r\n        this.refs.pwd.value ='';\r\n    }\r\nadd(){\r\n    var userid =this.refs.uid.value;\r\n    var pwd =this.refs.pwd.value;\r\n    var userObject ={\"userid\":userid,\"pwd\":pwd};\r\n    var promise=firebase.database().ref(\"users/\"+userid).set(userObject);\r\n    promise.then(data=>{\r\n        this.setState({msg:\" User Added....\"});\r\n    }).catch(err=>{\r\n        this.setState({msg:\"Error in User Added....\"});\r\n    })\r\n}\r\n\r\n\r\n    doLogin(){\r\n        var userid = this.refs.uid.value;\r\n        var pwd = this.refs.pwd.value;\r\n       var user= firebase.database().ref(\"users/\"+userid);\r\n        user.on(\"value\",(snapshot)=>{\r\n            var userObject =snapshot.val();\r\n            if(userObject.pwd==pwd){\r\n                this.setState({msg:'Welcome '+userid});\r\n                this.props.updateLoginStatus(true,userid); \r\n            }\r\n            else{\r\n                this.setState({msg:'Invalid Userid or Password'});\r\n            this.props.updateLoginStatus(false);\r\n            }\r\n        })\r\n            /*if(userid==pwd){\r\n            this.setState({msg:'Welcome '+userid});\r\n            this.props.updateLoginStatus(true,userid);\r\n        }\r\n        else{\r\n            this.setState({msg:'Invalid Userid or Password'});\r\n            this.props.updateLoginStatus(false);\r\n        }*/\r\n\r\n    }\r\n    render(){\r\n        return (\r\n            <div >\r\n\r\n                <h2 className=\"alert-info\">Login Page</h2>\r\n                <h3 className=\"alert-success\">{this.state.msg}</h3>\r\n                <div className=\"form-group\">\r\n                   <label htmlFor=\"userid\">Userid</label>\r\n                   <input id=\"userid\" ref=\"uid\" type=\"text\" className=\"form-control\" placeholder=\"type Userid here\"/>     \r\n                </div>\r\n                <div className=\"form-group\">\r\n                   <label htmlFor=\"\">Password</label>\r\n                   <input type=\"password\" ref=\"pwd\" className=\"form-control\" placeholder=\"type Password here\"/>     \r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <button onClick={this.doLogin.bind(this)} className=\"btn btn-primary\">Login</button>\r\n                    &nbsp;\r\n                    <button className =\"btn btn-success\"onClick={this.add.bind(this)}>Add</button>\r\n                    &nbsp;\r\n                    <button onClick={this.clear.bind(this)} className=\"btn btn-danger\">Clear</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","export const URLS= {\r\n    \"mobile\":'https://raw.githubusercontent.com/brainmentorspvtltd/myserverdata/master/mobiles.json'\r\n}","import React from 'react';\r\nimport {Header} from '../components/header';\r\nimport {Nav} from '../components/nav';\r\nimport {URLS} from '../utils/config';\r\nimport {Products} from '../components/products';\r\nexport class Shop extends React.Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {items:[],err:{}};\r\n  }  \r\n  \r\n  doAjax(){\r\n      fetch(URLS.mobile).then(response=>{\r\n          response.json().then(data=>{\r\n               this.setState({items:data['mobiles']});\r\n               console.log(\"Data is \",data['mobiles']); \r\n          }).catch(error=>{\r\n            this.setState({err:error});\r\n          })\r\n      }).catch(error=>{\r\n        this.setState({err:error});\r\n      });\r\n  }\r\n\r\n  componentWillMount() {\r\n      \r\n  }\r\n  componentDidMount () {\r\n    this.doAjax();\r\n  }\r\n  \r\n  \r\nrender(){\r\n    return (\r\n        <div>\r\n            <Header/>\r\n            <Nav/>\r\n            <h3>Welcome {this.props.userid}</h3>\r\n            \r\n        </div>\r\n    )\r\n}\r\n}","import React from 'react';\nimport {Header} from './components/header';\nimport {Nav} from './components/nav';\nimport {Login} from './components/login';\nimport {Shop} from './components/shop';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nexport default class App extends React.Component{\nconstructor(){\n  super();\n  this.state = {isLogin:false,userid:''};\n}\nisAuth(loginState, uid=''){\n  this.setState({isLogin:loginState,userid:uid});\n}\nrender(){\n  return (<div className=\"container\">\n    {this.state.isLogin?<Shop userid={this.state.userid}/>:<Login updateLoginStatus={this.isAuth.bind(this)}/>}\n   \n  </div>);\n}\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport * as firebase from \"firebase\";\nimport {config} from \"./utils/firebase-config\";\nfirebase.initializeApp(config);\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","\r\n\r\n  // Initialize Firebase\r\n  export const config ={\r\n    apiKey: \"AIzaSyAnNgrL4wCHk6OiPahID9G_XoA8muVIrzg\",\r\n    authDomain: \"hmrproject-e714c.firebaseapp.com\",\r\n    databaseURL: \"https://hmrproject-e714c.firebaseio.com\",\r\n    projectId: \"hmrproject-e714c\",\r\n    storageBucket: \"hmrproject-e714c.appspot.com\",\r\n    messagingSenderId: \"771466232737\"\r\n  };\r\n // firebase.initializeApp(config);"],"sourceRoot":""}